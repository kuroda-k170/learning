9/13
    新規画面作成

        ①Ajax共通化
                autocompleteのselectイベントで共通のAjax処理を使う場合、関数化して、その関数を呼び出すことで共通化が可能です。ここでは、autocompleteのselectイベント内で実行するAjax処理を共通化し、呼び出す方法を示します。

                例：autocompleteのselectイベント内でのAjax処理共通化
                1. Ajax処理を関数化
                まず、Ajax処理を関数として定義します。この関数は、autocompleteのselectイベントから呼び出されます。

                javascript
                コードをコピーする
                function performAjaxOnSelect(selectedValue) {
                $.ajax({
                        url: '/api/some_endpoint', // 共通のURL
                        type: 'POST',
                        data: { value: selectedValue },
                        success: function(response) {
                        // 通信成功時の共通処理
                        console.log('Ajax Success:', response);
                        // 例: 画面にデータを表示するなどの処理
                        },
                        error: function(xhr, status, error) {
                        // エラー時の処理
                        console.log('Ajax Error:', error);
                        }
                });
                }
                2. autocompleteのselectイベントで共通のAjax処理を呼び出す
                autocompleteのselectイベント内で、共通化した関数を呼び出します。

                javascript
                コードをコピーする
                $(document).ready(function() {
                // 1つ目のautocompleteの設定
                $("#autocomplete1").autocomplete({
                        source: availableTags, // サジェストデータ
                        select: function(event, ui) {
                        // 選択時に共通Ajax処理を呼び出す
                        performAjaxOnSelect(ui.item.value);
                        }
                });

                // 2つ目のautocompleteの設定
                $("#autocomplete2").autocomplete({
                        source: availableTags, // サジェストデータ
                        select: function(event, ui) {
                        // 選択時に共通Ajax処理を呼び出す
                        performAjaxOnSelect(ui.item.value);
                        }
                });
                });
                3. 説明
                performAjaxOnSelect関数:
                autocompleteのselectイベントで選択された値を引数として受け取り、それを使って共通のAjax処理を実行します。
                autocompleteのselectイベント内で共通化した関数を呼び出し:
                autocomplete1やautocomplete2で選択された値に応じて、同じAjax処理を行うようにしています。
                まとめ
                Ajax処理を関数化しておくことで、複数のautocompleteのselectイベントで共通の処理を再利用することができ、コードの重複を避けられます。
                選択された値に応じて動作するAjax処理を柔軟に共通化することが可能です。
                このようにして、同じAjax処理を使いたい場合、簡潔かつ再利用性の高いコードにすることができます。


②SQLソート（アルファベット含む数字）
        例: より一般的な文字列の場合
        数値とアルファベットの位置が固定されていない場合や、数値部分が変動する場合も考慮して、正規表現を使う方法もあります。

        方法2: 正規表現で数値部分を抽出してソート
        MySQL 8.0以上では、正規表現を使って数値部分を抽出することができます。例えば、数字とアルファベットの混在する文字列を扱う場合に以下のように正規表現で対応できます。

        sql
        コードをコピーする0122
        SELECT column_name
        FROM table_name
        ORDER BY
        REGEXP_SUBSTR(column_name, '^[0-9]+'), -- 先頭の数値部分を抽出してソート
        REGEXP_SUBSTR(column_name, '[A-Z]+'); -- アルファベット部分を抽出してソート


③グリッドがズレる
        テーブルボディの描画のタイミングが、ページ読み込みの時じゃないからうまくいかない