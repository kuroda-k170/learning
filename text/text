問題１、YYYYMMをどうやって、YYYYMMDDにするか？

問題２、プルダウンの中身のデータをどうやって編集するか？
    ①全削除後、同じ形式にしてデータを入れる
        foreachで回してやってるところを真似する？
        職業で医者・看護師とか分けるのが難しそう？
    ②重複しないものを削除する？
    ③

配列の構造を確認すると、次のようになっていることがわかります。各職業ごとにオプションが分かれており、さらに特別な値として"すべて"と"担当者登録なし"があります。この構造をJavaScriptで適切に処理し、プルダウンに追加するための方法を示します。

配列の例
json
コードをコピーする
[
    {"0": {"0": "すべて"}},
    {"1": {"-1": "担当者登録なし"}},
    {"事務": {"2558": "山田"}},
    {"医者": {"4558": "黒田"}},
    {"看護師": {"3558": "田中"}}
]
HTML部分
html
コードをコピーする
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>Dynamic Dropdown</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>

<input type="date" id="datePicker">
<select id="positionDropdown">
    <option value="">選択してください</option>
</select>

<script>
$(document).ready(function() {
    $('#datePicker').on('change', function() {
        var selectedDate = $(this).val();
        var csrfToken = $('input[name="csrf_token_name"]').val(); // CSRFトークンを取得

        $.ajax({
            url: 'YOUR_CONTROLLER/method',
            type: 'POST',
            data: {
                date: selectedDate,
                csrf_token_name: csrfToken
            },
            success: function(response) {
                var data = JSON.parse(response);
                updateDropdown(data);
            },
            error: function(xhr, status, error) {
                console.log('Error: ' + error);
            }
        });
    });

    // プルダウンの中身を更新する関数
    function updateDropdown(data) {
        var dropdown = $('#positionDropdown');
        dropdown.empty(); // 既存のオプションを削除

        // データをループして、各職業ごとに<optgroup>を作成
        $.each(data, function(index, item) {
            $.each(item, function(key, value) {
                if (typeof value === 'object') {
                    var optgroup = $('<optgroup>').attr('label', key);
                    $.each(value, function(id, name) {
                        optgroup.append($('<option>').attr('value', id).text(name));
                    });
                    dropdown.append(optgroup);
                } else {
                    dropdown.append($('<option>').attr('value', key).text(value));
                }
            });
        });
    }
});
</script>

</body>
</html>
説明
Ajaxリクエスト:

日付が変更されたときにAjaxリクエストを送信します。
サーバーからデータを取得し、JSON形式で受け取ります。
データのパースとプルダウンの更新:

updateDropdown関数を使ってプルダウンメニューを更新します。
取得したデータをループし、各職業ごとに<optgroup>を作成します。
特別な値（"すべて"や"担当者登録なし"）は直接<option>として追加します。
サーバーサイド（PHP）部分
サーバー側のCodeIgniterコントローラーで、指定日に基づいて役職データを取得し、JSON形式で返す例を示します。

php
コードをコピーする
class Calendar extends CI_Controller {

    public function test() {
        if ($this->input->is_ajax_request()) {
            $date = $this->input->post('date');
            $csrf_token = $this->input->post('csrf_token_name');

            // CSRFトークンのチェック
            if ($csrf_token !== $this->security->get_csrf_hash()) {
                show_error('CSRF token mismatch', 403);
            }

            // データベースから役職データを取得する処理
            $this->load->model('Position_model');
            $positions = $this->Position_model->get_positions_by_date($date);

            // JSON形式でデータを返す
            echo json_encode($positions);
        } else {
            show_404();
        }
    }
}
Position_modelの例
php
コードをコピーする
class Position_model extends CI_Model {

    public function get_positions_by_date($date) {
        // データベースクエリの例
        // 実際のクエリはアプリケーションに応じて調整してください
        $positions = [
            ["0" => ["0" => "すべて"]],
            ["1" => ["-1" => "担当者登録なし"]],
            ["事務" => ["2558" => "山田"]],
            ["医者" => ["4558" => "黒田"]],
            ["看護師" => ["3558" => "田中"]]
        ];

        return $positions;
    }
}
この方法を使えば、サーバーから取得したデータをそのままプルダウンメニューに動的に追加し、職業ごとにグループ化することができます。必要に応じて、データ構造やAjaxリクエストのURLなどを調整してください。





この配列を一気にプルダウンに追加する処理を書いてください。
ChatGPT
この配列を一気にプルダウンに追加する処理を以下に示します。jQueryを使用して、サーバーから取得したデータをプルダウンメニューに動的に追加します。

配列の例
json
コードをコピーする
[
    {"0": {"0": "すべて"}},
    {"1": {"-1": "担当者登録なし"}},
    {"事務": {"2558": "山田"}},
    {"医者": {"4558": "黒田"}},
    {"看護師": {"3558": "田中"}}
]
HTML部分
html
コードをコピーする
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>Dynamic Dropdown</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>

<input type="date" id="datePicker">
<select id="positionDropdown">
    <option value="">選択してください</option>
</select>

<script>
$(document).ready(function() {
    $('#datePicker').on('change', function() {
        var selectedDate = $(this).val();
        var csrfToken = $('input[name="csrf_token_name"]').val(); // CSRFトークンを取得

        $.ajax({
            url: 'YOUR_CONTROLLER/method',
            type: 'POST',
            data: {
                date: selectedDate,
                csrf_token_name: csrfToken
            },
            success: function(response) {
                var data = JSON.parse(response);
                updateDropdown(data);
            },
            error: function(xhr, status, error) {
                console.log('Error: ' + error);
            }
        });
    });

    // プルダウンの中身を更新する関数
    function updateDropdown(data) {
        var dropdown = $('#positionDropdown');
        dropdown.empty(); // 既存のオプションを削除
        dropdown.append($('<option>').attr('value', '').text('選択してください')); // 初期オプションを追加

        // データをループして、各職業ごとに<optgroup>を作成
        $.each(data, function(index, item) {
            $.each(item, function(key, value) {
                if (typeof value === 'object') {
                    var optgroup = $('<optgroup>').attr('label', key);
                    $.each(value, function(id, name) {
                        optgroup.append($('<option>').attr('value', id).text(name));
                    });
                    dropdown.append(optgroup);
                } else {
                    dropdown.append($('<option>').attr('value', key).text(value));
                }
            });
        });
    }
});
</script>

</body>
</html>
サーバーサイド（PHP）部分
サーバー側のCodeIgniterコントローラーで、指定日に基づいて役職データを取得し、JSON形式で返す例を示します。

php
コードをコピーする
class Calendar extends CI_Controller {

    public function test() {
        if ($this->input->is_ajax_request()) {
            $date = $this->input->post('date');
            $csrf_token = $this->input->post('csrf_token_name');

            // CSRFトークンのチェック
            if ($csrf_token !== $this->security->get_csrf_hash()) {
                show_error('CSRF token mismatch', 403);
            }

            // データベースから役職データを取得する処理
            $this->load->model('Position_model');
            $positions = $this->Position_model->get_positions_by_date($date);

            // JSON形式でデータを返す
            echo json_encode($positions);
        } else {
            show_404();
        }
    }
}
Position_modelの例
php
コードをコピーする
class Position_model extends CI_Model {

    public function get_positions_by_date($date) {
        // データベースクエリの例
        // 実際のクエリはアプリケーションに応じて調整してください
        $positions = [
            ["0" => ["0" => "すべて"]],
            ["1" => ["-1" => "担当者登録なし"]],
            ["事務" => ["2558" => "山田"]],
            ["医者" => ["4558" => "黒田"]],
            ["看護師" => ["3558" => "田中"]]
        ];

        return $positions;
    }
}
説明
Ajaxリクエスト:

日付が変更されたときにAjaxリクエストを送信します。
サーバーからデータを取得し、JSON形式で受け取ります。
データのパースとプルダウンの更新:

updateDropdown関数を使ってプルダウンメニューを更新します。
取得したデータをループし、各職業ごとに<optgroup>を作成します。
特別な値（"すべて"や"担当者登録なし"）は直接<option>として追加します。
この方法を使えば、サーバーから取得したデータをそのままプルダウンメニューに動的に追加し、職業ごとにグループ化することができます。必要に応じて、データ構造やAjaxリクエストのURLなどを調整してください。